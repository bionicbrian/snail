{:rename-macros {}, :renames {}, :externs {console {groupCollapsed {}, log {}, group {}, groupEnd {}, error {}}}, :use-macros {walk clojure.walk, prewalk clojure.walk}, :excludes #{}, :name re-frame-tracer.core, :imports nil, :requires {clojure.walk clojure.walk, clairvoyant.core clairvoyant.core}, :cljs.spec/speced-vars [], :uses {ITraceError clairvoyant.core, walk clojure.walk, prewalk clojure.walk, ITraceEnter clairvoyant.core, ITraceExit clairvoyant.core}, :defs {tracer {:protocol-inline nil, :meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/re_frame_tracer/core.cljs", :line 5, :column 7, :end-line 5, :end-column 13, :arglists (quote ([& {:keys [color tag], :as options}])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [color tag], :as options})], :arglists ([& {:keys [color tag], :as options}]), :arglists-meta (nil)}}, :name re-frame-tracer.core/tracer, :variadic true, :file "resources/public/js/compiled/out/re_frame_tracer/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [color tag], :as options})], :arglists ([& {:keys [color tag], :as options}]), :arglists-meta (nil)}, :method-params [({:keys [color tag], :as options})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [color tag], :as options}])}, t_re_frame_tracer$core30542 {:num-fields 11, :protocols #{clairvoyant.core/ITraceError clairvoyant.core/ITraceEnter cljs.core/IMeta clairvoyant.core/ITraceExit cljs.core/IWithMeta}, :name re-frame-tracer.core/t_re_frame_tracer$core30542, :file "resources/public/js/compiled/out/re_frame_tracer/core.cljs", :type true, :anonymous true, :column 5, :line 36, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t_re_frame_tracer$core30542 {:protocol-inline nil, :meta {:anonymous true, :protocols #{clairvoyant.core/ITraceError clairvoyant.core/ITraceEnter cljs.core/IMeta clairvoyant.core/ITraceExit cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([tag log-exit options map__30540 fn-like? has-bindings? color log-binding pr-val p__30539 meta30543])), :file nil}, :protocols #{clairvoyant.core/ITraceError clairvoyant.core/ITraceEnter cljs.core/IMeta clairvoyant.core/ITraceExit cljs.core/IWithMeta}, :name re-frame-tracer.core/->t_re_frame_tracer$core30542, :variadic false, :file "resources/public/js/compiled/out/re_frame_tracer/core.cljs", :method-params ([tag log-exit options map__30540 fn-like? has-bindings? color log-binding pr-val p__30539 meta30543]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 36, :max-fixed-arity 11, :fn-var true, :arglists (quote ([tag log-exit options map__30540 fn-like? has-bindings? color log-binding pr-val p__30539 meta30543])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{tag :args & log-exit options :dispatch-val map__30540 :color fn-like? :exit :init :protocol deftype :ns :name :arglist let has-bindings? cljs.core/defn- cljs.core/defn fn color :op defn cljs.core/extend-protocol cljs.core/let extend-type defmethod cljs.core/defrecord extend-protocol :anonymous? reify fn* defn- cljs.core/reify log-binding cljs.core/deftype cljs.core/fn cljs.core/defmethod pr-val binding :error :form :tag p__30539 cljs.core/extend-type defrecord :ex-data meta30543}, :order [:color :tag cljs.core/extend-protocol deftype defmethod fn* cljs.core/let defn extend-protocol extend-type cljs.core/defrecord cljs.core/fn reify let fn defrecord defn- cljs.core/defmethod cljs.core/defn cljs.core/deftype cljs.core/extend-type cljs.core/reify cljs.core/defn- :form :args :dispatch-val :protocol :init :ns :name :arglist :op :anonymous? & binding :exit :error :ex-data tag log-exit options map__30540 fn-like? has-bindings? color log-binding pr-val p__30539 meta30543]}, :doc nil}