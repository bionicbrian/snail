{:rename-macros {}, :renames {}, :externs {console {groupCollapsed {}, log {}, groupEnd {}, error {}}}, :use-macros {walk clojure.walk, prewalk clojure.walk}, :excludes #{}, :name clairvoyant.core, :imports nil, :requires {clojure.walk clojure.walk}, :cljs.spec/speced-vars [], :uses {walk clojure.walk, prewalk clojure.walk}, :defs {trace-enter {:protocol-inline nil, :meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 19, :column 7, :end-line 19, :end-column 18, :arglists (quote ([tracer trace-data])), :doc "Call the -trace-enter method for a given tracer with trace-data.\n  tracer must satisfy ITraceEnter."}, :name clairvoyant.core/trace-enter, :variadic false, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :end-column 18, :method-params ([tracer trace-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tracer trace-data])), :doc "Call the -trace-enter method for a given tracer with trace-data.\n  tracer must satisfy ITraceEnter."}, default-tracer {:name clairvoyant.core/default-tracer, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :line 66, :column 1, :end-line 66, :end-column 20, :meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 66, :column 6, :end-line 66, :end-column 20}, :tag clairvoyant.core/t_clairvoyant$core30505}, ->t_clairvoyant$core30505 {:protocol-inline nil, :meta {:anonymous true, :protocols #{clairvoyant.core/ITraceError clairvoyant.core/ITraceEnter cljs.core/IMeta clairvoyant.core/ITraceExit cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([pr-val* pr-val log-binding log-exit has-bindings? fn-like? meta30506])), :file nil}, :protocols #{clairvoyant.core/ITraceError clairvoyant.core/ITraceEnter cljs.core/IMeta clairvoyant.core/ITraceExit cljs.core/IWithMeta}, :name clairvoyant.core/->t_clairvoyant$core30505, :variadic false, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :method-params ([pr-val* pr-val log-binding log-exit has-bindings? fn-like? meta30506]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 107, :max-fixed-arity 7, :fn-var true, :arglists (quote ([pr-val* pr-val log-binding log-exit has-bindings? fn-like? meta30506])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t_clairvoyant$core30521 {:num-fields 10, :protocols #{clairvoyant.core/ITraceError clairvoyant.core/ITraceEnter cljs.core/IMeta clairvoyant.core/ITraceExit cljs.core/IWithMeta}, :name clairvoyant.core/t_clairvoyant$core30521, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :type true, :anonymous true, :column 5, :line 200, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, -trace-enter {:protocol-inline nil, :meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 8, :column 4, :end-line 8, :end-column 16, :protocol clairvoyant.core/ITraceEnter, :doc nil, :arglists (quote ([this trace-data]))}, :protocol clairvoyant.core/ITraceEnter, :name clairvoyant.core/-trace-enter, :variadic false, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :end-column 16, :method-params ([this trace-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this trace-data])), :doc nil}, -trace-exit {:protocol-inline nil, :meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 14, :column 4, :end-line 14, :end-column 15, :protocol clairvoyant.core/ITraceExit, :doc nil, :arglists (quote ([this trace-data]))}, :protocol clairvoyant.core/ITraceExit, :name clairvoyant.core/-trace-exit, :variadic false, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :end-column 15, :method-params ([this trace-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 14, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this trace-data])), :doc nil}, cljs-devtools-tracer {:protocol-inline nil, :meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 169, :column 7, :end-line 169, :end-column 27, :arglists (quote ([& {:keys [color], :as options}])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [color], :as options})], :arglists ([& {:keys [color], :as options}]), :arglists-meta (nil)}}, :name clairvoyant.core/cljs-devtools-tracer, :variadic true, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [color], :as options})], :arglists ([& {:keys [color], :as options}]), :arglists-meta (nil)}, :method-params [({:keys [color], :as options})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [color], :as options}])}, -trace-error {:protocol-inline nil, :meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 11, :column 4, :end-line 11, :end-column 16, :protocol clairvoyant.core/ITraceError, :doc nil, :arglists (quote ([this trace-data]))}, :protocol clairvoyant.core/ITraceError, :name clairvoyant.core/-trace-error, :variadic false, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :end-column 16, :method-params ([this trace-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this trace-data])), :doc nil}, fn-re {:meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 42, :column 16, :end-line 42, :end-column 21, :private true}, :private true, :name clairvoyant.core/fn-re, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :end-column 21, :column 1, :line 42, :end-line 42, :tag any, :doc "Matches the function signature of the result of (str f) where f is a\n  function. Captures the argument list and identifier (if possible)."}, trace-error {:protocol-inline nil, :meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 25, :column 7, :end-line 25, :end-column 18, :arglists (quote ([tracer trace-data])), :doc "Call the -trace-error method for a given tracer with trace-data.\n  tracer must satisfy ITraceError."}, :name clairvoyant.core/trace-error, :variadic false, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :end-column 18, :method-params ([tracer trace-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tracer trace-data])), :doc "Call the -trace-error method for a given tracer with trace-data.\n  tracer must satisfy ITraceError."}, devmode {:name clairvoyant.core/devmode, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :line 40, :column 1, :end-line 40, :end-column 21, :declared true, :meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 40, :column 14, :end-line 40, :end-column 21, :declared true}}, t_clairvoyant$core30505 {:num-fields 7, :protocols #{clairvoyant.core/ITraceError clairvoyant.core/ITraceEnter cljs.core/IMeta clairvoyant.core/ITraceExit cljs.core/IWithMeta}, :name clairvoyant.core/t_clairvoyant$core30505, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :type true, :anonymous true, :column 5, :line 107, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ITraceError {:meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 10, :column 14, :end-line 10, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-trace-error [[this trace-data]]}}}, :protocol-symbol true, :name clairvoyant.core/ITraceError, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :end-column 25, :column 1, :line 10, :protocol-info {:methods {-trace-error [[this trace-data]]}}, :info nil, :end-line 10, :tag any, :impls #{clairvoyant.core/t_clairvoyant$core30521 clairvoyant.core/t_clairvoyant$core30505}, :doc nil, :jsdoc ("@interface")}, fn-signature {:protocol-inline nil, :meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 47, :column 8, :end-line 47, :end-column 20, :private true, :arglists (quote ([f])), :doc "Return the function signature of f.\n\n  Example:\n\n    (fn-signature inc)\n    ;;=> (fn inc [x])\n\n    (fn-signature map)\n    ;; => (fn [f c1 c2 c3 var_args])\n  "}, :private true, :name clairvoyant.core/fn-signature, :variadic false, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :end-column 20, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Return the function signature of f.\n\n  Example:\n\n    (fn-signature inc)\n    ;;=> (fn inc [x])\n\n    (fn-signature map)\n    ;; => (fn [f c1 c2 c3 var_args])\n  "}, ITraceEnter {:meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 7, :column 14, :end-line 7, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-trace-enter [[this trace-data]]}}}, :protocol-symbol true, :name clairvoyant.core/ITraceEnter, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :end-column 25, :column 1, :line 7, :protocol-info {:methods {-trace-enter [[this trace-data]]}}, :info nil, :end-line 7, :tag any, :impls #{clairvoyant.core/t_clairvoyant$core30521 clairvoyant.core/t_clairvoyant$core30505}, :doc nil, :jsdoc ("@interface")}, ->t_clairvoyant$core30521 {:protocol-inline nil, :meta {:anonymous true, :protocols #{clairvoyant.core/ITraceError clairvoyant.core/ITraceEnter cljs.core/IMeta clairvoyant.core/ITraceExit cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([p__30518 map__30519 options color pr-val log-binding log-exit has-bindings? fn-like? meta30522])), :file nil}, :protocols #{clairvoyant.core/ITraceError clairvoyant.core/ITraceEnter cljs.core/IMeta clairvoyant.core/ITraceExit cljs.core/IWithMeta}, :name clairvoyant.core/->t_clairvoyant$core30521, :variadic false, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :method-params ([p__30518 map__30519 options color pr-val log-binding log-exit has-bindings? fn-like? meta30522]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 200, :max-fixed-arity 10, :fn-var true, :arglists (quote ([p__30518 map__30519 options color pr-val log-binding log-exit has-bindings? fn-like? meta30522])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, trace-exit {:protocol-inline nil, :meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 31, :column 7, :end-line 31, :end-column 17, :arglists (quote ([tracer trace-data])), :doc "Call the -trace-exit method for a given tracer with trace-data.\n  tracer must satisfy ITraceExit."}, :name clairvoyant.core/trace-exit, :variadic false, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :end-column 17, :method-params ([tracer trace-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([tracer trace-data])), :doc "Call the -trace-exit method for a given tracer with trace-data.\n  tracer must satisfy ITraceExit."}, ITraceExit {:meta {:file "/Users/mooreb/projects/bmo/scratch/snail/resources/public/js/compiled/out/clairvoyant/core.cljs", :line 13, :column 14, :end-line 13, :end-column 24, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-trace-exit [[this trace-data]]}}}, :protocol-symbol true, :name clairvoyant.core/ITraceExit, :file "resources/public/js/compiled/out/clairvoyant/core.cljs", :end-column 24, :column 1, :line 13, :protocol-info {:methods {-trace-exit [[this trace-data]]}}, :info nil, :end-line 13, :tag any, :impls #{clairvoyant.core/t_clairvoyant$core30521 clairvoyant.core/t_clairvoyant$core30505}, :doc nil, :jsdoc ("@interface")}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{meta30522 :args & pr-val* log-exit options map__30519 :dispatch-val :color fn-like? p__30518 :exit :init :else :protocol deftype :ns :name :arglist let has-bindings? cljs.core/defn- cljs.core/defn fn color :op defn cljs.core/extend-protocol meta30506 cljs.core/let extend-type defmethod cljs.core/defrecord extend-protocol :anonymous? reify fn* defn- cljs.core/reify log-binding cljs.core/deftype cljs.core/fn cljs.core/defmethod pr-val binding :error :form cljs.core/extend-type defrecord :ex-data}, :order [fn :else cljs.core/extend-protocol deftype defmethod fn* cljs.core/let defn extend-protocol extend-type cljs.core/defrecord cljs.core/fn reify let defrecord defn- cljs.core/defmethod cljs.core/defn cljs.core/deftype cljs.core/extend-type cljs.core/reify cljs.core/defn- :form :args :dispatch-val :protocol :init :ns :name :arglist :op :anonymous? & binding :exit :error :ex-data pr-val* pr-val log-binding log-exit has-bindings? fn-like? meta30506 :color p__30518 map__30519 options color meta30522]}, :doc nil}